{"version":3,"sources":["doge.png","ConnectionManager.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ConnectionManager","chat","Object","classCallCheck","this","conn","id","peers","Map","send","bind","address","_this","WebSocket","addEventListener","console","log","event","receive","data","readyState","OPEN","msg","_this2","message","JSON","parse","type","addMessage","userid","users","push","you","clients","forEach","client","updateUserList","messages","stringify","Chat","props","possibleConstructorReturn","getPrototypeOf","call","state","value","connectionManager","handleChange","assertThisInitialized","sendMessage","window","location","hostname","url","getServerUrl","connect","timeoutId","setTimeout","e","preventDefault","setState","clearInterval","target","user","last","pop","undefined","scrollToBottom","maxScrollTop","messageList","scrollHeight","clientHeight","scrollTop","_messages","map","index","combined","join","react_default","a","createElement","className","src","logo","alt","concat","apply","toConsumableArray","i","slice","activeUsers","key","ref","div","reactstrap_es","onSubmit","row","placeholder","onChange","Component","App","src_Chat_0","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4932efe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/doge.69ae4e8f.png\";","class ConnectionManager {\r\n    constructor(chat) {\r\n        this.chat = chat;\r\n        this.conn = null;\r\n        this.id = null;\r\n        this.peers = new Map();\r\n\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    connect(address) {\r\n        this.conn = new WebSocket(address);\r\n\r\n        this.conn.addEventListener('open', () => {\r\n            console.log('Connection established!')\r\n        });\r\n\r\n        this.conn.addEventListener('message', event => {\r\n            this.receive(event.data);\r\n        });\r\n    }\r\n\r\n    isOpen() {\r\n        return this.conn.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    receive(msg) {\r\n        const message = JSON.parse(msg);\r\n\r\n        console.log('Received message', message.type);\r\n        \r\n        if (message.type === 'chat') {\r\n            this.chat.addMessage(message.data.userid, message.data.message);\r\n        }\r\n        else if (message.type === 'server_broadcast') {\r\n            const users = [];\r\n            users.push(message.data.peers.you);\r\n            message.data.peers.clients.forEach(client => {\r\n                if (client.id !== message.data.peers.you) {\r\n                    users.push(client.id);\r\n                }\r\n            });\r\n            this.chat.updateUserList(users);\r\n        }\r\n        else if (message.type === 'chat_history') {\r\n            const messages = message.data.messages;\r\n            messages.forEach(msg => {\r\n                this.chat.addMessage(msg.userid, msg.message);\r\n            });\r\n\r\n        }\r\n        else if (message.type === 'pong') {\r\n            console.log('Ping pong successful.');\r\n        }\r\n       \r\n    }\r\n\r\n    send(data) {\r\n        const msg = JSON.stringify(data);\r\n        console.log('Sending message', msg);\r\n        this.conn.send(msg);\r\n    }\r\n}\r\n\r\nexport default ConnectionManager;","import React, { Component } from 'react';\r\nimport ConnectionManager from './ConnectionManager.js';\r\nimport { Media, Col, Form, FormGroup, Input } from 'reactstrap';\r\nimport './Chat.css';\r\nimport logo from './doge.png';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '', messages: [], users: [] };\r\n        this.connectionManager = null;\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    getServerUrl() {\r\n        if (window.location.hostname === 'localhost') {\r\n            return 'ws://localhost:9876';\r\n        }\r\n        else {\r\n            return 'wss://fred-im.herokuapp.com';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = this.getServerUrl();\r\n        this.connectionManager = new ConnectionManager(this);\r\n        this.connectionManager.connect(url);\r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    sendMessage(e) {\r\n        e.preventDefault();\r\n        this.send({\r\n            type: 'chat',\r\n            message: this.state.value,\r\n        });\r\n        this.setState({ value: '' });\r\n    }\r\n    \r\n    send(data) {\r\n        \r\n        clearInterval(this.timeoutId);\r\n        \r\n        this.connectionManager.send(data);\r\n        \r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    addMessage(user, message) {\r\n        const messages = JSON.parse(JSON.stringify(this.state.messages));\r\n\r\n        const last = messages.pop();\r\n\r\n        if (last === undefined) {\r\n            messages.push({ user, message: [message] });\r\n        }\r\n        else if (last.user !== user) {\r\n            messages.push(last);\r\n            messages.push({ user, message: [message] });\r\n        }\r\n        else { // Last message has same user as this\r\n            last.message.push(message);\r\n            messages.push(last);\r\n        }\r\n        \r\n        this.setState({ messages });\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    updateUserList(users) {\r\n        this.setState({ users });\r\n    }\r\n\r\n    scrollToBottom() {\r\n        const scrollHeight = this.messageList.scrollHeight;\r\n        const height = this.messageList.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.messageList.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        let messages = this.state.messages.map((msg, index) => {\r\n            const combined = msg.message.join('\\n');\r\n            return (\r\n                <li className=\"media\">\r\n                    <img src={logo} className=\"align-self-end imagedoge mr-3\" alt=\"Avatar\"></img>\r\n                    <div className=\"media-body linebreak\">\r\n                        <h5>{msg.user}</h5>\r\n                        {combined}\r\n                    </div>\r\n                </li>\r\n            );\r\n        });\r\n        \r\n        messages = messages.concat(...messages.map((e,i) => [(<hr></hr>), e])).slice(1);\r\n\r\n        const activeUsers = this.state.users.map((user, index) => {\r\n            return (\r\n                <div className=\"media\" key={index}>\r\n                    <img className=\"imagedoge image-small\" src={logo} alt=\"Doge\"></img>\r\n                    <div className=\"media-body\">\r\n                        <h5 className=\"mt-2\">{user}</h5>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n        return (\r\n            <div className=\"container-fluid h-100\">\r\n                <div className=\"row h-100\">\r\n\r\n                    <div className=\"col-9 d-flex flex-column\">\r\n                        <div className=\"row flex-fill\">\r\n                            <div className=\"col messages-container mb-3\" ref={div => {\r\n                                this.messageList = div;\r\n                            }}>\r\n                                <ul className=\"list-unstyled messages\">\r\n                                    {messages}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col p-2 chat-form\">\r\n                                <Form onSubmit={this.sendMessage}>\r\n                                    <FormGroup row>\r\n                                        <Col>\r\n                                            <Input id=\"message-input\" placeholder=\"Message...\" type=\"text\" onChange={this.handleChange} value={this.state.value}></Input>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"col userlist\">\r\n                        Active users\r\n                        <ul className=\"list-unstyled\">\r\n                            {activeUsers}                       \r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// function Media(props) {\r\n//     return (\r\n//         <div className=\"media\" >\r\n//             <img className=\"imagedoge\" src={logo} alt=\"Doge\"></img>\r\n//             <div className=\"media-body\">\r\n//                 <h5 className={props.mt}>{props.user}</h5>\r\n//                 {props.message.map((msg, index) => (<p key={index} className=\"mg-0\">{msg}</p>))}\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nexport default Chat;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// "],"sourceRoot":""}