{"version":3,"sources":["doge.png","components/Message.js","Chat.js","util.js","components/Header.js","ConnectionManager.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Message","userid","this","props","msgs","react_default","a","createElement","className","src","logo","alt","style","minWidth","map","msg","i","key","concat","date","message","Component","Chat","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","delayBetweenTypingStates","handleChange","bind","assertThisInitialized","sendChatMessage","notifyStartTyping","notifyStoppedTyping","clearTimeout","typingTimeoutID","e","preventDefault","send","type","setState","event","target","timerIsRunning","setTimeout","reactstrap_es","fluid","minHeight","overflow","Chat_MessageContainer","messages","height","Typers","typers","onSubmit","name","id","placeholder","onChange","autoComplete","MessageContainer","_this2","scrollToBottom","messagesEnd","scrollIntoView","array","_this3","reduce","prev","curr","length","topArr","pop","push","Message_Message","m","flat","slice","ref","el","Header","toggle","isOpen","color","dark","onClick","navbar","users","u","ConnectionManager","uiHandler","uiManager","conn","peers","Map","address","WebSocket","addEventListener","console","log","receive","data","readyState","OPEN","JSON","parse","_message$data","d","receiveMessage","receiveChatHistory","me","you","others","clients","receiveActiveUsers","toConsumableArray","o","addToTypers","removeFromTypers","stringify","App","connectionManager","url","getServerUrl","connect","pingTimeoutId","filter","typerid","window","location","hostname","set","Set","Header_Header","src_Chat_0","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wUCKnBC,mLAER,IACGC,EAAWC,KAAKC,MAAMC,KAAK,GAA3BH,OACR,OACII,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BACVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BC,IAAKC,IAAMC,IAAI,WAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaI,MAAO,CAACC,SAAU,MAC1CR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQP,GACtBI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAENN,KAAKC,MAAMC,KAAKU,IAAI,SAACC,EAAKC,GACtB,OAAOX,EAAAC,EAAAC,cAAA,MAAIU,IAAG,GAAAC,OAAKF,EAAL,OAAAE,OAAYH,EAAII,OAASJ,EAAIK,qBAZtCC,aCQ/BC,qBAEF,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAoB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA1B,KAAMC,KACD0B,MAAQ,CAAEC,MAAO,IAEtBP,EAAKQ,yBAA2B,IAEhCR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,gBAAkBZ,EAAKY,gBAAgBF,KAArBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACvBA,EAAKa,kBAAoBb,EAAKa,kBAAkBH,KAAvBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACzBA,EAAKc,oBAAsBd,EAAKc,oBAAoBJ,KAAzBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATZA,sFAafe,aAAapC,KAAKqC,yDAGNC,GACZA,EAAEC,iBAEFvC,KAAKmC,sBACLnC,KAAKC,MAAMuC,KAAK,CACZC,KAAM,OACNvB,QAASlB,KAAK2B,MAAMC,QAExB5B,KAAK0C,SAAS,CAAEd,MAAO,0CAGde,GACT3C,KAAKkC,oBACLlC,KAAK0C,SAAS,CAAEd,MAAOe,EAAMC,OAAOhB,oDAIX,KAArB5B,KAAK2B,MAAMC,QAGfQ,aAAapC,KAAKqC,iBACdrC,KAAK6C,eACL7C,KAAKqC,gBAAkBS,WAAW9C,KAAKmC,oBAAqBnC,KAAK6B,2BAGjE7B,KAAKC,MAAMuC,KAAK,CAAEC,KAAM,mBACxBzC,KAAK6C,gBAAiB,EACtB7C,KAAKqC,gBAAkBS,WAAW9C,KAAKmC,oBAAqBnC,KAAK6B,0EAKrE7B,KAAKC,MAAMuC,KAAK,CAAEC,KAAM,mBACxBzC,KAAK6C,gBAAiB,EACtBT,aAAapC,KAAKqC,kDAKlB,OACIlC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAWC,OAAO,EAAMtC,MAAO,CAAEuC,UAAW,KAAO3C,UAAU,kCACzDH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKzC,UAAU,cAAcI,MAAO,CAAEwC,SAAU,SAC5C/C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKzC,UAAU,eAEXH,EAAAC,EAAAC,cAAC8C,EAAD,CAAkBC,SAAUpD,KAAKC,MAAMmD,aAI/CjD,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKzC,UAAU,iBACXH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKzC,UAAU,GAAGI,MAAO,CAAE2C,OAAQ,QAC/BlD,EAAAC,EAAAC,cAACiD,EAAD,CAAQC,OAAQvD,KAAKC,MAAMsD,WAGnCpD,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKzC,UAAU,iBACXH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKzC,UAAU,IACXH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMS,SAAUxD,KAAKiC,iBACjB9B,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,KACI5C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CACIzC,UAAU,GACVmC,KAAK,OACLgB,KAAK,OACLC,GAAG,gBACHC,YAAY,aACZC,SAAU5D,KAAK8B,aACfF,MAAO5B,KAAK2B,MAAMC,MAClBiC,aAAa,oBAnF9B1C,cA6Fb2C,cAEF,SAAAA,EAAY7D,GAAO,IAAA8D,EAAA,OAAAzC,OAAAC,EAAA,EAAAD,CAAAtB,KAAA8D,IACfC,EAAAzC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAwC,GAAApC,KAAA1B,KAAMC,KAED+D,eAAiBD,EAAKC,eAAejC,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAyC,KAHPA,mFAOf/D,KAAKgE,8DAILhE,KAAKgE,0DAILhE,KAAKiE,YAAYC,kDAGZ,IC9HWC,EAAOpD,ED8HlBqD,EAAApE,KAGDoD,GCjIYe,ED+HgBnE,KAAKC,MAAMmD,SC/HpBrC,ED+H8B,SC9HlDoD,EAAME,OAAO,SAACC,EAAMC,GACvB,GAAKD,EAAKE,OAIL,CACD,IAAMC,EAASH,EAAKI,MAGpB,OAFYD,EAAOA,EAAOD,OAAS,GAE3BzD,KAASwD,EAAKxD,IAClB0D,EAAOE,KAAKJ,GACZD,EAAKK,KAAKF,GACHH,IAGPA,EAAKK,KAAKF,GACVH,EAAKK,KAAK,CAACJ,IACJD,GAdX,OADAA,EAAKK,KAAK,CAACJ,IACJD,GAiBZ,KD4GgC1D,IAAI,SAACV,EAAMY,GAAP,OAAaX,EAAAC,EAAAC,cAACuE,EAAD,CAAS1E,KAAMA,EAAMa,IAAK,aAAeD,MAKzF,OAFAsC,GADAA,EAAWA,EAASxC,IAAI,SAACiE,EAAG/D,GAAJ,MAAU,CAAC+D,EAAG1E,EAAAC,EAAAC,cAAA,MAAIU,IAAK,KAAOD,OAAWgE,QAC7CC,MAAM,GAAI,GAG1B5E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACT8C,EACDjD,EAAAC,EAAAC,cAAA,MACI2E,IAAK,SAACC,GAASb,EAAKH,YAAcgB,aAhCvB9D,aAwC/B,SAASmC,EAAOrD,GACZ,OAAKA,EAAMsD,OAAOiB,OAGe,IAAxBvE,EAAMsD,OAAOiB,OACXrE,EAAAC,EAAAC,cAAA,YAAOJ,EAAMsD,OAAO,GAApB,2BAEsB,IAAxBtD,EAAMsD,OAAOiB,OACXrE,EAAAC,EAAAC,cAAA,YAAOJ,EAAMsD,OAAO,GAApB,QAA6BtD,EAAMsD,OAAO,GAA1C,4BAGApD,EAAAC,EAAAC,cAAA,YAAOJ,EAAMsD,OAAO,GAApB,KAA0BtD,EAAMsD,OAAO,GAAvC,QAAgDtD,EAAMsD,OAAOiB,OAAS,EAAtE,8BATA,KAaApD,QExJM8D,qBACjB,SAAAA,EAAYjF,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAkF,IACf7D,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAA4D,GAAAxD,KAAA1B,KAAMC,KACDkF,OAAS9D,EAAK8D,OAAOpD,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACdA,EAAKM,MAAQ,CACTyD,QAAQ,GAJG/D,wEASfrB,KAAK0C,SAAS,CACV0C,QAASpF,KAAK2B,MAAMyD,0CAIxB,OACIjF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAQzC,UAAU,wBAAwB+E,MAAM,QAAQC,MAAI,GACxDnF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAazC,UAAU,sBAAvB,gBACAH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAewC,QAASvF,KAAKmF,OAAQ7E,UAAU,SAC/CH,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUqC,OAAQpF,KAAK2B,MAAMyD,OAAQI,QAAM,GACvCrF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEPN,KAAKC,MAAMwF,MAAM7E,IAAI,SAAC8E,EAAG5E,GAAJ,OAAUX,EAAAC,EAAAC,cAAA,KAAGU,IAAK,eAAiBD,GAAI4E,eAvBpDvE,cCyDrBwE,aAjEX,SAAAA,EAAYC,GAAYtE,OAAAC,EAAA,EAAAD,CAAAtB,KAAA2F,GACpB3F,KAAK6F,UAAYD,EACjB5F,KAAK8F,KAAO,KACZ9F,KAAK0D,GAAK,KACV1D,KAAK+F,MAAQ,IAAIC,IAEjBhG,KAAKwC,KAAOxC,KAAKwC,KAAKT,KAAK/B,0DAGvBiG,GAAS,IAAA5E,EAAArB,KACbA,KAAK8F,KAAO,IAAII,UAAUD,GAE1BjG,KAAK8F,KAAKK,iBAAiB,OAAQ,WAC/BC,QAAQC,IAAI,6BAGhBrG,KAAK8F,KAAKK,iBAAiB,UAAW,SAAAxD,GAClCtB,EAAKiF,QAAQ3D,EAAM4D,yCAKvB,OAAOvG,KAAK8F,KAAKU,aAAeN,UAAUO,qCAGtC5F,GACJ,IAAMK,EAAUwF,KAAKC,MAAM9F,GAE3B,GAAqB,SAAjBK,EAAQuB,KAAiB,KAAAmE,EAEkB1F,EAAQqF,KAAnCb,EAFSkB,EAEjB7G,OAAoB8E,EAFH+B,EAEN1F,QAAkB2F,EAFZD,EAEM3F,KAC/BmF,QAAQC,IAAI,8BAA+BX,GAC3C1F,KAAK6F,UAAUiB,eAAepB,EAAGb,EAAGgC,QAEnC,GAAqB,iBAAjB3F,EAAQuB,KAAyB,CAEtC2D,QAAQC,IAAI,yBAA0BnF,EAAQqF,KAAKnD,SAASoB,OAAQ,aACpE,IAAMpB,EAAWlC,EAAQqF,KAAKnD,SAC9BpD,KAAK6F,UAAUkB,mBAAmB3D,QAEjC,GAAqB,qBAAjBlC,EAAQuB,KAA6B,CAC1C,IAAMuE,EAAK9F,EAAQqF,KAAKR,MAAMkB,IACxBC,EAAShG,EAAQqF,KAAKR,MAAMoB,QAClCnH,KAAK6F,UAAUuB,mBAAf,CAAmCJ,GAAnChG,OAAAM,OAAA+F,EAAA,EAAA/F,CAA0C4F,EAAOtG,IAAI,SAAA0G,GAAC,OAAIA,EAAE5D,YAEtC,SAAjBxC,EAAQuB,KACb2D,QAAQC,IAAI,yBAEU,wBAAjBnF,EAAQuB,MACb2D,QAAQC,IAAI,yBACZrG,KAAK6F,UAAU0B,YAAYrG,EAAQqF,KAAKxG,SAElB,wBAAjBmB,EAAQuB,OACb2D,QAAQC,IAAI,yBACZrG,KAAK6F,UAAU2B,iBAAiBtG,EAAQqF,KAAKxG,sCAIhDwG,GACD,IAAM1F,EAAM6F,KAAKe,UAAUlB,GAC3BH,QAAQC,IAAI,kBAAmBxF,GAC/Bb,KAAK8F,KAAKtD,KAAK3B,YCmBR6G,cAxEd,SAAAA,EAAYzH,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAA0H,IAClBrG,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAoG,GAAAhG,KAAA1B,KAAMC,KACD0B,MAAQ,CAAEyB,SAAU,GAAIqC,MAAO,GAAIlC,OAAQ,IAChDlC,EAAKsG,kBAAoB,KAEzBtG,EAAKmB,KAAOnB,EAAKmB,KAAKT,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALMA,mFASlB,IAAMuG,EAAM5H,KAAK6H,eACX7H,KAAK2H,kBAAoB,IAAIhC,EAAkB3F,MAC/CA,KAAK2H,kBAAkBG,QAAQF,GAC/B5H,KAAK+H,cAAgBjF,WAAW9C,KAAKwC,KAAM,IAAO,CAAEC,KAAM,kDAGhD1C,GAChBC,KAAK0C,SAAS,SAAA4B,GAAI,MAAK,CACtBf,OAAQe,EAAKf,OAAOyE,OAAO,SAAAC,GAAO,OAAIA,IAAYlI,8CAK7C,MAAiC,cAA7BmI,OAAOC,SAASC,SACT,sBAGA,yEAIChF,GAClBpD,KAAK0C,SAAS,CAAEU,oDAGFrD,EAAQc,EAAKI,GAC3BjB,KAAK0C,SAAS,SAAA4B,GAAI,MAAK,CACtBlB,SAAS9B,OAAA+F,EAAA,EAAA/F,CAAKgD,EAAKlB,UAAXpC,OAAA,CAAqB,CAAEjB,SAAQmB,QAASL,EAAKI,wDAIpCwE,GAClB,IAAM4C,EAAM,IAAIC,IAAI7C,GACpBzF,KAAK0C,SAAS,CAAE+C,MAAMnE,OAAA+F,EAAA,EAAA/F,CAAK+G,sCAI3B,OACClI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBI,MAAO,CAAE2C,OAAQ,UACxDlD,EAAAC,EAAAC,cAACkI,EAAD,CAAQ9C,MAAOzF,KAAK2B,MAAM8D,QAC1BtF,EAAAC,EAAAC,cAACmI,EAAD,CACC/C,MAAOzF,KAAK2B,MAAM8D,MAClBlC,OAAQvD,KAAK2B,MAAM4B,OACnBH,SAAUpD,KAAK2B,MAAMyB,SACrBZ,KAAMxC,KAAKwC,qCAMV+D,GACJnE,aAAapC,KAAK+H,eAClB/H,KAAK+H,cAAgBjF,WAAW9C,KAAKwC,KAAM,IAAO,CAAEC,KAAM,SAC1DzC,KAAK2H,kBAAkBnF,KAAK+D,uCAGjBxG,GACXC,KAAK0C,SAAS,SAAA4B,GAAI,MAAK,CACtBf,OAAOjC,OAAA+F,EAAA,EAAA/F,CAAKgD,EAAKf,QAAXvC,OAAA,CAAmBjB,cArEVoB,aCGEsH,QACW,cAA7BP,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASM,MACvB,2DCTNC,IAASC,OAAOzI,EAAAC,EAAAC,cAACwI,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.76bdd854.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/doge.69ae4e8f.png\";","import React, { Component } from 'react';\r\nimport { formatDate } from '../util.js';\r\nimport { Media } from 'reactstrap';\r\nimport logo from '../doge.png';\r\n\r\nexport default class Message extends Component {\r\n\r\n    render() {\r\n        const { userid } = this.props.msgs[0];\r\n        return (\r\n            <li className=\"media ow-wrap-break-word\" >\r\n                <img className=\"mr-3 avatar rounded-circle\" src={logo} alt=\"Avatar\" />\r\n                <div className=\"media-body\" style={{minWidth: '0'}}>\r\n                    <h5 className=\"mt-0\">{userid}</h5>\r\n                    <ul className=\"list-unstyled\">\r\n                        {\r\n                            this.props.msgs.map((msg, i) => {\r\n                                return <li key={`${i}sub${msg.date}`}>{msg.message}</li>;\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </li>\r\n            // <Media className=\"\">\r\n            //     <Media left bottom>\r\n            //         <Media object className=\"avatar mr-2 rounded-circle\" src={logo} alt=\"avatar\" />\r\n            //     </Media>\r\n            //     <Media body className=\"\">\r\n            //         <Media heading>\r\n            //             {userid}\r\n            //         </Media>\r\n            //         {\r\n            //             this.props.msgs.map((msg, i) => {\r\n            //                 return (\r\n            //                     <p \r\n            //                         style={{}} \r\n            //                         className=\"\" \r\n            //                         key={msg.date}\r\n            //                     >\r\n            //                         {msg.message}\r\n            //                     </p>\r\n            //                 );\r\n            //             })\r\n            //         }\r\n            //         <div className=\"align-self-end text-muted\">\r\n            //             {formatDate(this.props.msgs[this.props.msgs.length - 1].date)}\r\n            //         </div>\r\n            //     </Media>\r\n            // </Media>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { groupBy } from './util.js';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    Input\r\n} from 'reactstrap';\r\nimport Message from './components/Message.js';\r\nimport './Chat.css';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.delayBetweenTypingStates = 10000;\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.sendChatMessage = this.sendChatMessage.bind(this);\r\n        this.notifyStartTyping = this.notifyStartTyping.bind(this);\r\n        this.notifyStoppedTyping = this.notifyStoppedTyping.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.typingTimeoutID);\r\n    }\r\n\r\n    sendChatMessage(e) {\r\n        e.preventDefault();\r\n\r\n        this.notifyStoppedTyping();\r\n        this.props.send({\r\n            type: 'chat',\r\n            message: this.state.value,\r\n        });\r\n        this.setState({ value: '' });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.notifyStartTyping();\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    notifyStartTyping() {\r\n        if (this.state.value === '') {\r\n            return;\r\n        }\r\n        clearTimeout(this.typingTimeoutID);\r\n        if (this.timerIsRunning) {\r\n            this.typingTimeoutID = setTimeout(this.notifyStoppedTyping, this.delayBetweenTypingStates);\r\n        }\r\n        else {\r\n            this.props.send({ type: 'started_typing' });\r\n            this.timerIsRunning = true;\r\n            this.typingTimeoutID = setTimeout(this.notifyStoppedTyping, this.delayBetweenTypingStates);\r\n        }\r\n    }\r\n\r\n    notifyStoppedTyping() {\r\n        this.props.send({ type: 'stopped_typing' });\r\n        this.timerIsRunning = false;\r\n        clearTimeout(this.typingTimeoutID);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container fluid={true} style={{ minHeight: '0' }} className=\"d-flex flex-column flex-grow-1\">\r\n                <Row className=\"flex-grow-1\" style={{ overflow: 'auto' }}>\r\n                    <Col className=\"flex-grow-1\">\r\n\r\n                        <MessageContainer messages={this.props.messages} />\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"flex-shrink-0\">\r\n                    <Col className=\"\" style={{ height: '2em' }}>\r\n                        <Typers typers={this.props.typers} />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"flex-shrink-0\">\r\n                    <Col className=\"\">\r\n                        <Form onSubmit={this.sendChatMessage}>\r\n                            <FormGroup>\r\n                                <Input\r\n                                    className=\"\"\r\n                                    type=\"text\"\r\n                                    name=\"text\"\r\n                                    id=\"message-input\"\r\n                                    placeholder=\"Message...\"\r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.value}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nclass MessageContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollToBottom = this.scrollToBottom.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    scrollToBottom() {\r\n        this.messagesEnd.scrollIntoView();\r\n    }\r\n\r\n    render() {\r\n        const groupedMessages = groupBy(this.props.messages, 'userid');\r\n\r\n        let messages = groupedMessages.map((msgs, i) => <Message msgs={msgs} key={'msg-group-' + i} />);\r\n\r\n        messages = messages.map((m, i) => [m, <hr key={'hr' + i}></hr>]).flat();\r\n        messages = messages.slice(0, -1);\r\n\r\n        return (\r\n            <ul className=\"list-unstyled\">\r\n                {messages}\r\n                <li\r\n                    ref={(el) => { this.messagesEnd = el }}\r\n                >\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Typers(props) {\r\n    if (!props.typers.length) {\r\n        return null;\r\n    }\r\n    else if (props.typers.length === 1) {\r\n        return <span>{props.typers[0]} is typing a message...</span>\r\n    }\r\n    else if (props.typers.length === 2) {\r\n        return <span>{props.typers[0]} and {props.typers[1]} are typing a message...</span>\r\n    }\r\n    else {\r\n        return <span>{props.typers[0]}, {props.typers[1]} and {props.typers.length - 2} other users are typing...</span>\r\n    }\r\n}\r\n\r\nexport default Chat;","export function groupBy(array, key) {\r\n    return array.reduce((prev, curr) => {\r\n        if (!prev.length) {\r\n            prev.push([curr]);\r\n            return prev;\r\n        }\r\n        else {\r\n            const topArr = prev.pop();\r\n            const top = topArr[topArr.length - 1];\r\n\r\n            if (top[key] === curr[key]) {\r\n                topArr.push(curr);\r\n                prev.push(topArr);\r\n                return prev;\r\n            }\r\n            else {\r\n                prev.push(topArr);\r\n                prev.push([curr]);\r\n                return prev;\r\n            }\r\n        }\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Dose not work for objects that contains functions.\r\n * @param {*} obj \r\n */\r\nexport function deepClone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function formatDate(date) {\r\n    //format date based on time elapsed\r\n    // if date is more than 24 hours old, return date month year\r\n    // else return time of day it was written.\r\n    const before = new Date(date);\r\n    const now = new Date();\r\n    const diff = now - before;\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    let [day, dt, month, yr, hr, min, sec] \r\n        = [\r\n            before.getDay(), \r\n            before.getDate(),\r\n            before.getMonth(),\r\n            before.getFullYear(),\r\n            before.getHours(),\r\n            before.getMinutes(),\r\n            before.getSeconds()\r\n        ];\r\n    if (diff > (24 - hr) * 60 * 60 * 1000) {\r\n        return `${days[day]} at ${hr}:${min}:${sec} - ${dt}.${month}.${yr}`;\r\n    }\r\n    else {\r\n        if (min < 10) {\r\n            min = ''.concat('0', min);\r\n        }\r\n        return `${hr}:${min}`;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand\r\n} from 'reactstrap';\r\nimport './Header.css';\r\n\r\nexport default class Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false,\r\n        };\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <Navbar className=\"bg-dark flex-shrink-0\" color=\"light\" dark>\r\n                <NavbarBrand className=\"mr-auto text-light\">active users</NavbarBrand>\r\n                <NavbarToggler onClick={this.toggle} className=\"mr-2\" />\r\n                <Collapse isOpen={this.state.isOpen} navbar>\r\n                    <hr />\r\n                    <div className=\"text-light\">\r\n                        {\r\n                            this.props.users.map((u, i) => <p key={'header-user-' + i}>{u}</p>)\r\n                        }\r\n                    </div>\r\n                </Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}","class ConnectionManager {\r\n    constructor(uiHandler) {\r\n        this.uiManager = uiHandler;\r\n        this.conn = null;\r\n        this.id = null;\r\n        this.peers = new Map();\r\n\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    connect(address) {\r\n        this.conn = new WebSocket(address);\r\n\r\n        this.conn.addEventListener('open', () => {\r\n            console.log('Connection established!')\r\n        });\r\n\r\n        this.conn.addEventListener('message', event => {\r\n            this.receive(event.data);\r\n        });\r\n    }\r\n\r\n    isOpen() {\r\n        return this.conn.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    receive(msg) {\r\n        const message = JSON.parse(msg);\r\n\r\n        if (message.type === 'chat') {\r\n\r\n            const { userid: u, message: m, date: d } = message.data;\r\n            console.log('Received a new message from', u);\r\n            this.uiManager.receiveMessage(u, m, d);\r\n        }\r\n        else if (message.type === 'chat_history') {\r\n\r\n            console.log('Received a chat log of', message.data.messages.length, 'messages.');\r\n            const messages = message.data.messages;\r\n            this.uiManager.receiveChatHistory(messages);\r\n        }\r\n        else if (message.type === 'server_broadcast') {\r\n            const me = message.data.peers.you;\r\n            const others = message.data.peers.clients;\r\n            this.uiManager.receiveActiveUsers([me, ...others.map(o => o.id)]);\r\n        }\r\n        else if (message.type === 'pong') {\r\n            console.log('Ping pong successful.');\r\n        }\r\n        else if (message.type === 'user_started_typing') {\r\n            console.log('A user started typing');\r\n            this.uiManager.addToTypers(message.data.userid);\r\n        }\r\n        else if (message.type === 'user_stopped_typing') {\r\n            console.log('A user stopped typing');\r\n            this.uiManager.removeFromTypers(message.data.userid);\r\n        }\r\n    }\r\n\r\n    send(data) {\r\n        const msg = JSON.stringify(data);\r\n        console.log('Sending message', msg);\r\n        this.conn.send(msg);\r\n    }\r\n}\r\n\r\nexport default ConnectionManager;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Chat from './Chat.js';\r\nimport Header from './components/Header.js';\r\nimport ConnectionManager from './ConnectionManager.js';\r\n\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { messages: [], users: [], typers: [] };\r\n\t\tthis.connectionManager = null;\r\n\r\n\t\tthis.send = this.send.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst url = this.getServerUrl();\r\n        this.connectionManager = new ConnectionManager(this);\r\n        this.connectionManager.connect(url);\r\n        this.pingTimeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n\t}\r\n\r\n\tremoveFromTypers(userid) {\r\n\t\tthis.setState(prev => ({\r\n\t\t\ttypers: prev.typers.filter(typerid => typerid !== userid)\r\n\t\t}));\r\n\t}\r\n\r\n\tgetServerUrl() {\r\n        if (window.location.hostname === 'localhost') {\r\n            return 'ws://localhost:9876';\r\n        }\r\n        else {\r\n            return 'wss://fred-im.herokuapp.com';\r\n        }\r\n\t}\r\n\r\n\treceiveChatHistory(messages) {\r\n\t\tthis.setState({ messages });\r\n\t}\r\n\r\n\treceiveMessage(userid, msg, date) {\r\n\t\tthis.setState(prev => ({\r\n\t\t\tmessages: [...prev.messages, { userid, message: msg, date }]\r\n\t\t}));\r\n\t}\r\n\r\n\treceiveActiveUsers(users) {\r\n\t\tconst set = new Set(users);\r\n\t\tthis.setState({ users: [...set] });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App d-flex flex-column\" style={{ height: '100vh' }}>\r\n\t\t\t\t<Header users={this.state.users} />\r\n\t\t\t\t<Chat \r\n\t\t\t\t\tusers={this.state.users}\r\n\t\t\t\t\ttypers={this.state.typers}\r\n\t\t\t\t\tmessages={this.state.messages}\r\n\t\t\t\t\tsend={this.send}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tsend(data) {\r\n\t\tclearTimeout(this.pingTimeoutId);\r\n\t\tthis.pingTimeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n\t\tthis.connectionManager.send(data);\r\n\t}\r\n\r\n\taddToTypers(userid) {\r\n\t\tthis.setState(prev => ({\r\n\t\t\ttypers: [...prev.typers, userid]\r\n\t\t}));\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// "],"sourceRoot":""}