{"version":3,"sources":["doge.png","ConnectionManager.js","Chat.js","util.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ConnectionManager","chat","Object","classCallCheck","this","conn","id","peers","Map","send","bind","address","_this","WebSocket","addEventListener","console","log","event","receive","data","readyState","OPEN","msg","message","JSON","parse","type","addMessage","userid","date","users","Set","add","you","clients","forEach","client","updateUserList","messages","addHistory","stringify","Chat","props","possibleConstructorReturn","getPrototypeOf","call","state","value","connectionManager","handleChange","assertThisInitialized","sendChatMessage","window","location","hostname","url","getServerUrl","connect","timeoutId","setTimeout","e","preventDefault","setState","clearInterval","target","scrollToBottom","obj","toConsumableArray","concat","maxScrollTop","messageList","scrollHeight","clientHeight","scrollTop","array","key","_this2","reduce","prev","curr","length","topArr","pop","push","map","msgs","react_default","a","createElement","Chat_Message","m","i","flat","slice","activeUsers","user","UserlistElement","className","ref","div","reactstrap_es","onSubmit","row","placeholder","onChange","Component","Message","_this$props$msgs$","src","logo","alt","before","Date","getDay","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","formatDate","App","src_Chat_0","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14f9050d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/doge.69ae4e8f.png\";","class ConnectionManager {\r\n    constructor(chat) {\r\n        this.chat = chat;\r\n        this.conn = null;\r\n        this.id = null;\r\n        this.peers = new Map();\r\n\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    connect(address) {\r\n        this.conn = new WebSocket(address);\r\n\r\n        this.conn.addEventListener('open', () => {\r\n            console.log('Connection established!')\r\n        });\r\n\r\n        this.conn.addEventListener('message', event => {\r\n            this.receive(event.data);\r\n        });\r\n    }\r\n\r\n    isOpen() {\r\n        return this.conn.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    receive(msg) {\r\n        const message = JSON.parse(msg);\r\n\r\n        \r\n        if (message.type === 'chat') {\r\n\r\n            console.log('Received message', message);\r\n            this.chat.addMessage(message.data.userid, message.data.message, message.data.date);\r\n        }\r\n        else if (message.type === 'server_broadcast') {\r\n\r\n            console.log('Received message', message.type);\r\n            const users = new Set();\r\n            users.add(message.data.peers.you);\r\n            message.data.peers.clients.forEach(client => users.add(client.id));\r\n            this.chat.updateUserList(users);\r\n        }\r\n        else if (message.type === 'chat_history') {\r\n\r\n            console.log('Received message', message.type);\r\n            const messages = message.data.messages;\r\n            this.chat.addHistory(messages);\r\n        }\r\n        else if (message.type === 'pong') {\r\n\r\n            console.log('Ping pong successful.');\r\n        }\r\n       \r\n    }\r\n\r\n    send(data) {\r\n        const msg = JSON.stringify(data);\r\n        console.log('Sending message', msg);\r\n        this.conn.send(msg);\r\n    }\r\n}\r\n\r\nexport default ConnectionManager;","import React, { Component } from 'react';\r\nimport ConnectionManager from './ConnectionManager.js';\r\nimport { Col, Form, FormGroup, Input } from 'reactstrap';\r\nimport { groupBy, deepClone, formatDate } from './util.js';\r\nimport './Chat.css';\r\nimport logo from './doge.png';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '', messages: [], users: [] };\r\n        this.connectionManager = null;\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.sendChatMessage = this.sendChatMessage.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    getServerUrl() {\r\n        if (window.location.hostname === 'localhost') {\r\n            return 'ws://localhost:9876';\r\n        }\r\n        else {\r\n            return 'wss://fred-im.herokuapp.com';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = this.getServerUrl();\r\n        this.connectionManager = new ConnectionManager(this);\r\n        this.connectionManager.connect(url);\r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n        console.log('COMPONENT MOUNTED WAHOO');\r\n    }\r\n\r\n    sendChatMessage(e) {\r\n\r\n        e.preventDefault();\r\n        this.send({\r\n            type: 'chat',\r\n            message: this.state.value,\r\n        });\r\n        this.setState({ value: '' });\r\n    }\r\n\r\n    send(data) {\r\n\r\n        clearInterval(this.timeoutId);\r\n        this.connectionManager.send(data);\r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    addHistory(messages) {\r\n        this.setState({ messages });\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    addMessage(userid, message, date) {\r\n\r\n        let messages = deepClone(this.state.messages);\r\n        messages = [...messages, { userid, message, date }];\r\n        this.setState({ messages });\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    updateUserList(users) {\r\n        this.setState({ users });\r\n    }\r\n\r\n    scrollToBottom() {\r\n        const scrollHeight = this.messageList.scrollHeight;\r\n        const height = this.messageList.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.messageList.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        const groupedMessages = groupBy(this.state.messages, 'userid');\r\n\r\n        let messages = groupedMessages.map((msgs) => <Message msgs={msgs} key={msgs[0].date} />);\r\n\r\n        messages = messages.map((m, i) => [m, <hr key={'hr' + i}></hr>]).flat();\r\n        messages = messages.slice(0, -1);\r\n        const activeUsers = [...this.state.users]\r\n            .map(user => <UserlistElement user={user} key={user} />);\r\n\r\n        return (\r\n            <div className=\"container-fluid h-100\">\r\n                <div className=\"row h-100\">\r\n\r\n                    <div className=\"col-9 d-flex flex-column\">\r\n                        <div className=\"row flex-fill\">\r\n                            <div className=\"col messages-container mb-3 d-flex flex-column\" ref={div => {\r\n                                this.messageList = div;\r\n                            }}>\r\n                                <ul className=\"list-unstyled messages \">\r\n                                    {messages}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col p-2 chat-form\">\r\n                                <Form onSubmit={this.sendChatMessage}>\r\n                                    <FormGroup row>\r\n                                        <Col>\r\n                                            <Input id=\"message-input\" placeholder=\"Message...\" type=\"text\" onChange={this.handleChange} value={this.state.value}></Input>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col userlist\">\r\n                        Active users\r\n                        <ul className=\"list-unstyled\">\r\n                            {activeUsers}\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends Component {\r\n\r\n    render() {\r\n        const { userid, date } = this.props.msgs[0];\r\n        return (\r\n            <li className=\"media\" key={date}>\r\n                <img src={logo} className=\"align-self-end imagedoge mr-3 mb-4\" alt=\"avatar.png\"></img>\r\n                <div className=\"media-body d-flex flex-column\">\r\n                    <h5>{userid}</h5>\r\n                    {this.props.msgs.map((msg, i) => {\r\n                        return (\r\n                            <div key={`${userid}-${i}`}>\r\n                                <div> {msg.message} </div> \r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"align-self-end mr-3\">{formatDate(this.props.msgs[this.props.msgs.length - 1].date)}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nfunction UserlistElement(props) {\r\n    return (\r\n        <li key={props.user} className=\"media\">\r\n            <img className=\"image-small imagedoge mr-1\" src={logo} alt=\"avatar\" />\r\n            <div className=\"media-body\">\r\n                <h5 className=\"mt-2\">{props.user}</h5>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\nexport default Chat;","export function groupBy(array, key) {\r\n    return array.reduce((prev, curr) => {\r\n        if (!prev.length) {\r\n            prev.push([curr]);\r\n            return prev;\r\n        }\r\n        else {\r\n            const topArr = prev.pop();\r\n            const top = topArr[topArr.length - 1];\r\n\r\n            if (top[key] === curr[key]) {\r\n                topArr.push(curr);\r\n                prev.push(topArr);\r\n                return prev;\r\n            }\r\n            else {\r\n                prev.push(topArr);\r\n                prev.push([curr]);\r\n                return prev;\r\n            }\r\n        }\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Dose not work for objects that contains functions.\r\n * @param {*} obj \r\n */\r\nexport function deepClone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function formatDate(date) {\r\n    //format date based on time elapsed\r\n    // if date is more than 24 hours old, return date month year\r\n    // else return time of day it was written.\r\n    const before = new Date(date);\r\n    const now = new Date();\r\n    const diff = now - before;\r\n    const hrs = ((diff / 1000) / 60) / 60;\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    if (hrs > 24) {\r\n        return `${days[before.getDay()]}. ${before.getDate()}.${before.getMonth()}.${before.getFullYear()} - ${before.getHours()}:${before.getMinutes()}:${before.getSeconds()}`\r\n    }\r\n    else {\r\n        return `${before.getHours()}:${before.getMinutes()}`\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// "],"sourceRoot":""}