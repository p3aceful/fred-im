{"version":3,"sources":["ConnectionManager.js","Chat.js","util.js","App.js","serviceWorker.js","index.js","doge.png"],"names":["ConnectionManager","chat","Object","classCallCheck","this","conn","id","peers","Map","send","bind","address","_this","WebSocket","addEventListener","console","log","event","receive","data","readyState","OPEN","msg","message","JSON","parse","type","addMessage","userid","date","users","Set","add","you","clients","forEach","client","updateUserList","messages","addHistory","addCurrentTyper","removeCurrentTyper","stringify","Chat","props","possibleConstructorReturn","getPrototypeOf","call","state","value","typers","connectionManager","handleChange","assertThisInitialized","sendChatMessage","window","location","hostname","url","getServerUrl","connect","pingTimeoutId","setTimeout","e","preventDefault","setState","clearInterval","typingTimeoutId","filter","t","length","toConsumableArray","concat","u","target","scrollToBottom","obj","maxScrollTop","messageList","scrollHeight","clientHeight","scrollTop","array","key","_this2","reduce","prev","curr","topArr","pop","push","map","msgs","react_default","a","createElement","Chat_Message","m","i","className","flat","slice","activeUsers","user","UserlistElement","ref","div","Typers","onSubmit","placeholder","onChange","Component","Message","_this$props$msgs$","src","logo","alt","before","Date","diff","_ref","getDay","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","dt","month","yr","hr","min","sec","formatDate","end","join","App","src_Chat_0","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1a0a5810.chunk.js","sourcesContent":["class ConnectionManager {\r\n    constructor(chat) {\r\n        this.chat = chat;\r\n        this.conn = null;\r\n        this.id = null;\r\n        this.peers = new Map();\r\n\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    connect(address) {\r\n        this.conn = new WebSocket(address);\r\n\r\n        this.conn.addEventListener('open', () => {\r\n            console.log('Connection established!')\r\n        });\r\n\r\n        this.conn.addEventListener('message', event => {\r\n            this.receive(event.data);\r\n        });\r\n    }\r\n\r\n    isOpen() {\r\n        return this.conn.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    receive(msg) {\r\n        const message = JSON.parse(msg);\r\n\r\n        if (message.type === 'chat') {\r\n\r\n            console.log('Received message', message);\r\n            this.chat.addMessage(message.data.userid, message.data.message, message.data.date);\r\n        }\r\n        else if (message.type === 'server_broadcast') {\r\n\r\n            console.log('Received message', message.type);\r\n            const users = new Set();\r\n            users.add(message.data.peers.you);\r\n            message.data.peers.clients.forEach(client => users.add(client.id));\r\n            this.chat.updateUserList(users);\r\n        }\r\n        else if (message.type === 'chat_history') {\r\n\r\n            console.log('Received message', message.type);\r\n            const messages = message.data.messages;\r\n            this.chat.addHistory(messages);\r\n        }\r\n        else if (message.type === 'user_started_typing') {\r\n            this.chat.addCurrentTyper(message.data.userid);\r\n        }\r\n        else if (message.type === 'user_stopped_typing') {\r\n            this.chat.removeCurrentTyper(message.data.userid)\r\n        }\r\n        else if (message.type === 'pong') {\r\n\r\n            console.log('Ping pong successful.');\r\n        }\r\n       \r\n    }\r\n\r\n    send(data) {\r\n        const msg = JSON.stringify(data);\r\n        console.log('Sending message', msg);\r\n        this.conn.send(msg);\r\n    }\r\n}\r\n\r\nexport default ConnectionManager;","import React, { Component } from 'react';\r\nimport ConnectionManager from './ConnectionManager.js';\r\nimport { groupBy, deepClone, formatDate } from './util.js';\r\nimport './Chat.css';\r\nimport logo from './doge.png';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '', messages: [], users: [], typers: [] };\r\n        this.connectionManager = null;\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.sendChatMessage = this.sendChatMessage.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    getServerUrl() {\r\n        if (window.location.hostname === 'localhost') {\r\n            return 'ws://localhost:9876';\r\n        }\r\n        else {\r\n            return 'wss://fred-im.herokuapp.com';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = this.getServerUrl();\r\n        this.connectionManager = new ConnectionManager(this);\r\n        this.connectionManager.connect(url);\r\n        this.pingTimeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    sendChatMessage(e) {\r\n\r\n        e.preventDefault();\r\n        this.send({\r\n            type: 'chat',\r\n            message: this.state.value,\r\n        });\r\n        this.setState({ value: '' });\r\n    }\r\n\r\n    send(data) {\r\n        clearInterval(this.typingTimeoutId);\r\n        clearInterval(this.pingTimeoutId);\r\n        this.connectionManager.send({ type: 'stopped_typing' });\r\n        this.connectionManager.send(data);\r\n        this.pingTimeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    addCurrentTyper(userid) {\r\n        if (this.state.typers.filter(t => t === userid).length === 0) {\r\n            const users = [...this.state.typers, userid];\r\n            this.setState({ typers: users });\r\n        }\r\n    }\r\n\r\n    removeCurrentTyper(userid) {\r\n        const users = this.state.typers.filter(u => u !== userid);\r\n        this.setState({ typers: users });\r\n    }\r\n    \r\n    handleChange(event) {\r\n\r\n        if (event.target.value.length > this.state.value.length) {\r\n            this.send({\r\n                type: 'started_typing',\r\n            });\r\n            this.typingTimeoutId = setTimeout(this.send, 10000, { type: 'stopped_typing' });\r\n        }\r\n\r\n        if (event.target.value === '') {\r\n            clearInterval(this.typingTimeoutId);\r\n            this.send( { type: 'stopped_typing'});\r\n        }\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    addHistory(messages) {\r\n        this.setState({ messages });\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    addMessage(userid, message, date) {\r\n\r\n        let messages = deepClone(this.state.messages);\r\n        messages = [...messages, { userid, message, date }];\r\n        this.setState({ messages });\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    updateUserList(users) {\r\n        this.setState({ users });\r\n    }\r\n\r\n    scrollToBottom() {\r\n        const scrollHeight = this.messageList.scrollHeight;\r\n        const height = this.messageList.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.messageList.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        const groupedMessages = groupBy(this.state.messages, 'userid');\r\n\r\n        let messages = groupedMessages.map((msgs) => <Message msgs={msgs} key={msgs[0].date} />);\r\n\r\n        messages = messages.map((m, i) => [m, <hr className=\"no-margin\" key={'hr' + i}></hr>]).flat();\r\n        messages = messages.slice(0, -1);\r\n        const activeUsers = [...this.state.users]\r\n            .map(user => <UserlistElement user={user} key={user} />);\r\n\r\n        return (\r\n            <div className=\"container-fluid h-100\">\r\n                <div className=\"row h-100 no-gutters\">\r\n\r\n                    <div className=\"col-9 d-flex flex-column left-col\">\r\n                        <ul className=\"messages-container list-unstyled\" ref={div => this.messageList = div}>\r\n                            <div>\r\n                                {messages}\r\n                            </div>\r\n                        </ul>\r\n                        \r\n                        <Typers typers={this.state.typers} />\r\n                        <form className=\"mr-3\" onSubmit={this.sendChatMessage}>\r\n                            <div className=\"form-group row\">\r\n                                <div className=\"col\">\r\n                                    <input className=\"form-control\" id=\"message-input\" placeholder=\"Message...\" type=\"text\" onChange={this.handleChange} value={this.state.value} />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div className=\"col userlist\">\r\n                        Active users\r\n                        <ul className=\"list-unstyled\">\r\n                            {activeUsers}\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Message extends Component {\r\n\r\n    render() {\r\n        const { userid, date } = this.props.msgs[0];\r\n        return (\r\n            <li className=\"media message\" key={date}>\r\n                <img src={logo} className=\"align-self-end imagedoge mr-3 mb-4\" alt=\"avatar.png\"></img>\r\n                <div className=\"media-body d-flex flex-column\">\r\n                    <h5>{userid}</h5>\r\n                    {this.props.msgs.map((msg, i) => {\r\n                        return (\r\n                            <div className=\"wrap\" key={`${userid}-${i}`}>\r\n                                {msg.message}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"align-self-end mr-3\">{formatDate(this.props.msgs[this.props.msgs.length - 1].date)}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Typers(props) {\r\n    const typers = [...props.typers];\r\n    if (typers.length === 0) {\r\n        return <p></p>;\r\n    }\r\n    const end = typers.length > 1 ? ' are ' : ' is ';\r\n\r\n    return <p>{typers.join(', ') + end + 'typing.'}</p>;\r\n}\r\nfunction UserlistElement(props) {\r\n    return (\r\n        <li key={props.user} className=\"media\">\r\n            <img className=\"image-small imagedoge mr-1\" src={logo} alt=\"avatar\" />\r\n            <div className=\"media-body\">\r\n                <h5 className=\"mt-2\">{props.user}</h5>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\nexport default Chat;","export function groupBy(array, key) {\r\n    return array.reduce((prev, curr) => {\r\n        if (!prev.length) {\r\n            prev.push([curr]);\r\n            return prev;\r\n        }\r\n        else {\r\n            const topArr = prev.pop();\r\n            const top = topArr[topArr.length - 1];\r\n\r\n            if (top[key] === curr[key]) {\r\n                topArr.push(curr);\r\n                prev.push(topArr);\r\n                return prev;\r\n            }\r\n            else {\r\n                prev.push(topArr);\r\n                prev.push([curr]);\r\n                return prev;\r\n            }\r\n        }\r\n    }, []);\r\n}\r\n\r\n/**\r\n * Dose not work for objects that contains functions.\r\n * @param {*} obj \r\n */\r\nexport function deepClone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport function formatDate(date) {\r\n    //format date based on time elapsed\r\n    // if date is more than 24 hours old, return date month year\r\n    // else return time of day it was written.\r\n    const before = new Date(date);\r\n    const now = new Date();\r\n    const diff = now - before;\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    let [day, dt, month, yr, hr, min, sec] \r\n        = [\r\n            before.getDay(), \r\n            before.getDate(),\r\n            before.getMonth(),\r\n            before.getFullYear(),\r\n            before.getHours(),\r\n            before.getMinutes(),\r\n            before.getSeconds()\r\n        ];\r\n    if (diff > (24 - hr) * 60 * 60 * 1000) {\r\n        return `${days[day]} at ${hr}:${min}:${sec} - ${dt}.${month}.${yr}`;\r\n    }\r\n    else {\r\n        if (min < 10) {\r\n            min = ''.concat('0', min);\r\n        }\r\n        return `${hr}:${min}`;\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// ","module.exports = __webpack_public_path__ + \"static/media/doge.69ae4e8f.png\";"],"sourceRoot":""}