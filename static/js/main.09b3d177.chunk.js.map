{"version":3,"sources":["ConnectionManager.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["ConnectionManager","chat","Object","classCallCheck","this","conn","id","peers","Map","send","bind","address","_this","WebSocket","addEventListener","console","log","event","data","receive","readyState","OPEN","msg","JSON","parse","type","appendMessage","sender","message","users","push","you","clients","forEach","client","updateUserList","stringify","Chat","props","possibleConstructorReturn","getPrototypeOf","call","state","value","messages","connectionManager","handleChange","assertThisInitialized","sendMessage","connect","timeoutId","setTimeout","e","preventDefault","setState","clearInterval","target","user","concat","scrollToBottom","maxScrollTop","messageList","scrollHeight","clientHeight","scrollTop","_this2","msgs","map","i","react_default","a","createElement","key","className","activeUsers","ref","div","onSubmit","placeholder","onChange","Component","App","src_Chat_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09b3d177.chunk.js","sourcesContent":["class ConnectionManager {\r\n    constructor(chat) {\r\n        this.chat = chat;\r\n        this.conn = null;\r\n        this.id = null;\r\n        this.peers = new Map();\r\n\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    connect(address) {\r\n        this.conn = new WebSocket(address);\r\n\r\n        this.conn.addEventListener('open', () => {\r\n            console.log('Connection established!')\r\n        });\r\n\r\n        this.conn.addEventListener('message', event => {\r\n            console.log('Received message', event.data);\r\n            this.receive(event.data);\r\n        });\r\n    }\r\n\r\n    isOpen() {\r\n        return this.conn.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    receive(msg) {\r\n        const data = JSON.parse(msg);\r\n\r\n        if (data.type === 'chat') {\r\n            this.chat.appendMessage(data.sender, data.message);\r\n        }\r\n        else if (data.type === 'server-broadcast') {\r\n            const users = [];\r\n            users.push(data.peers.you);\r\n            data.peers.clients.forEach(client => {\r\n                if (client.id !== data.peers.you) {\r\n                    users.push(client.id);\r\n                }\r\n            });\r\n            this.chat.updateUserList(users);\r\n        }\r\n        else if (data.type === 'pong') {\r\n            console.log('Ping pong successful.');\r\n        }\r\n       \r\n    }\r\n\r\n    send(data) {\r\n        const msg = JSON.stringify(data);\r\n        console.log('Sending message', msg);\r\n        this.conn.send(msg);\r\n    }\r\n}\r\n\r\nexport default ConnectionManager;","import React, { Component } from 'react';\r\nimport ConnectionManager from './ConnectionManager.js';\r\nimport './Chat.css';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '', messages: [], users: [] };\r\n        this.connectionManager = null;\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.connectionManager = new ConnectionManager(this);\r\n        this.connectionManager.connect('wss://fred-im.herokuapp.com');\r\n        // this.connectionManager.connect('ws://localhost:9876');\r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    sendMessage(e) {\r\n        e.preventDefault();\r\n        this.send({\r\n            type: 'chat',\r\n            message: this.state.value,\r\n        });\r\n        this.setState({ value: '' });\r\n    }\r\n    \r\n    send(data) {\r\n        \r\n        clearInterval(this.timeoutId);\r\n        \r\n        this.connectionManager.send(data);\r\n        \r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    appendMessage(user, message) {\r\n        const messages = JSON.parse(JSON.stringify(this.state.messages));\r\n        messages.push(`${user}: ${message}`);\r\n        this.setState({ messages });\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    updateUserList(users) {\r\n        this.setState({ users });\r\n    }\r\n\r\n    scrollToBottom() {\r\n        const scrollHeight = this.messageList.scrollHeight;\r\n        const height = this.messageList.clientHeight;\r\n        const maxScrollTop = scrollHeight - height;\r\n        this.messageList.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\r\n    }\r\n\r\n    render() {\r\n\r\n        const msgs = this.state.messages.map((msg, i) => <li key={i} className=\"list-group-item\">{msg}</li>);\r\n        const activeUsers = this.state.users.map(user => <li key={user}>{user}</li>)\r\n        return (\r\n            <div className=\"container-fluid f-90\">\r\n                <div className=\"row f-90\">\r\n                    <div \r\n                        className=\"col-9 f-90 messages\"\r\n                        ref={div => {\r\n                            this.messageList = div;\r\n                        }}\r\n                    >\r\n                        <ul className=\"list-group\">\r\n                            {msgs}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-3 f-90 users\">Active Users:\r\n                        {activeUsers}\r\n                    </div>\r\n                </div>\r\n                <div className=\"col f-10\">\r\n\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.sendMessage}>\r\n                            <div className=\"input-group\">\r\n                                <input type=\"text\" placeholder=\"Message...\" onChange={this.handleChange} className=\"form-control\" value={this.state.value}/>\r\n                                <div className=\"input-group-append\">\r\n                                    <button className=\"btn\" type=\"submit\" id=\"button-addon2\">Send</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}